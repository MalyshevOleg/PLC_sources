Index: arch/arm/plat-omap/Makefile
===================================================================
--- linux.old/arch/arm/plat-omap/Makefile	(.../tags/owen-spk2xx-base)	(revision 926)
+++ linux.new/arch/arm/plat-omap/Makefile	(.../branches/owen-spk2xx-denisv)	(revision 926)
@@ -32,3 +32,5 @@
 obj-$(CONFIG_OMAP_MBOX_FWK) += mailbox.o
 
 obj-$(CONFIG_OMAP_PM_NOOP) += omap-pm-noop.o
+
+obj-$(CONFIG_HAVE_PWM) += pwm.o
Index: arch/arm/plat-omap/Kconfig
===================================================================
--- linux.old/arch/arm/plat-omap/Kconfig	(.../tags/owen-spk2xx-base)	(revision 926)
+++ linux.new/arch/arm/plat-omap/Kconfig	(.../branches/owen-spk2xx-denisv)	(revision 926)
@@ -197,6 +197,16 @@
 	help
 	 Select this option if you want to use OMAP Dual-Mode timers.
 
+config HAVE_PWM
+       bool "Use PWM timers"
+       depends on OMAP_DM_TIMER
+       help
+         Select this option if you want to be able to request and use
+         one or more of the OMAP dual-mode timers as a generic PWM device
+         compatible with other generic PWM drivers such as the backlight or
+         beeper driver.
+
+
 config OMAP_SERIAL_WAKE
 	bool "Enable wake-up events for serial ports"
 	depends on ARCH_OMAP1 && OMAP_MUX
Index: arch/arm/plat-omap/include/plat/pwm.h
===================================================================
--- linux.old/arch/arm/plat-omap/include/plat/pwm.h	(.../tags/owen-spk2xx-base)	(revision 0)
+++ linux.new/arch/arm/plat-omap/include/plat/pwm.h	(.../branches/owen-spk2xx-denisv)	(revision 926)
@@ -0,0 +1,29 @@
+/*
+ *    Copyright (c) 2010 Grant Erickson <marathon96@xxxxxxxxx>
+ *
+ *    This program is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU General Public License
+ *    version 2 as published by the Free Software Foundation.
+ *
+ *    Description:
+ *      This file is defines platform-specific configuration data for
+ *      the OMAP generic PWM platform driver.
+ */
+
+#ifndef _OMAP2_PWM_H
+#define _OMAP2_PWM_H
+
+/**
+ * struct omap2_pwm_platform_config - OMAP platform-specific data for PWMs
+ * @timer_id: the OMAP dual-mode timer ID.
+ * @polarity: the polarity (active-high or -low) of the PWM.
+ *
+ * This identifies the OMAP dual-mode timer (dmtimer) that will be bound
+ * to the PWM.
+ */
+struct omap2_pwm_platform_config {
+	int timer_id;
+	bool polarity;
+};
+
+#endif /* _OMAP2_PWM_H */
Index: arch/arm/plat-omap/pwm.c
===================================================================
--- linux.old/arch/arm/plat-omap/pwm.c	(.../tags/owen-spk2xx-base)	(revision 0)
+++ linux.new/arch/arm/plat-omap/pwm.c	(.../branches/owen-spk2xx-denisv)	(revision 926)
@@ -0,0 +1,450 @@
+/*
+ *    Copyright (c) 2010 Grant Erickson <marathon96@xxxxxxxxx>
+ *
+ *    This program is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU General Public License
+ *    version 2 as published by the Free Software Foundation.
+ *
+ *    Description:
+ *      This file is the core OMAP2/3 support for the generic, Linux
+ *      PWM driver / controller, using the OMAP's dual-mode timers.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/pwm.h>
+#include <mach/hardware.h>
+#include <plat/dmtimer.h>
+#include <plat/pwm.h>
+
+/* Preprocessor Definitions */
+
+#undef OMAP_PWM_DEBUG
+
+#if defined(OMAP_PWM_DEBUG)
+#define DBG(args...)			\
+	do {						\
+		pr_info(args);			\
+	} while (0)
+#define DEV_DBG(dev, args...)	\
+	do {						\
+		dev_info(dev, args);	\
+	} while (0)
+#else
+#define DBG(args...)			\
+	do { } while (0)
+#define DEV_DBG(dev, args...)	\
+	do { } while (0)
+#endif /* defined(OMAP_PWM_DEBUG) */
+
+#define DM_TIMER_LOAD_MIN		0xFFFFFFFE
+
+/* Type Definitions */
+
+/**
+ * struct pwm_device - opaque internal PWM device instance state
+ * @head: list head for all PWMs managed by this driver.
+ * @pdev: corresponding platform device associated with this device instance.
+ * @dm_timer: corresponding dual-mode timer associated with this device
+ *  instance.
+ * @config: platform-specific configuration data.
+ * @label: description label.
+ * @use_count: use count.
+ * @pwm_id: generic PWM ID requested for this device instance.
+ *
+ * As far as clients of the PWM driver are concerned, PWM devices are
+ * opaque abstract objects. Consequently, this structure is used for
+ * tracking internal device instance state but is otherwise just a
+ * instance reference externally.
+ */
+
+struct pwm_device {
+	struct list_head				   head;
+	struct platform_device			  *pdev;
+	struct omap_dm_timer			  *dm_timer;
+	struct omap2_pwm_platform_config   config;
+	const char						  *label;
+	unsigned int					   use_count;
+	unsigned int					   pwm_id;
+};
+
+/* Function Prototypes */
+
+static int __devinit omap_pwm_probe(struct platform_device *pdev);
+static int __devexit omap_pwm_remove(struct platform_device *pdev);
+
+/* Global Variables */
+
+static struct platform_driver omap_pwm_driver = {
+	.driver		= {
+		.name	= "omap-pwm",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= omap_pwm_probe,
+	.remove		= __devexit_p(omap_pwm_remove)
+};
+
+/* List and associated lock for managing generic PWM devices bound to
+ * this driver.
+ */
+
+static DEFINE_MUTEX(pwm_lock);
+static LIST_HEAD(pwm_list);
+
+/**
+ * pwm_request - request and allocate the specified generic PWM device.
+ * @pwm_id: The identifier associated with the desired generic PWM device.
+ * @label: An optional pointer to a C string describing the usage of the
+ *         requested generic PWM device.
+ *
+ * Returns a pointer to the requested generic PWM device on success;
+ * otherwise, NULL on error.
+ */
+struct pwm_device *pwm_request(int pwm_id, const char *label)
+{
+	struct pwm_device *pwm = NULL;
+	bool found = false;
+
+	mutex_lock(&pwm_lock);
+
+	/* Walk the list of available PWMs and attempt to find a matching
+	 * ID, regardless of whether it is in use or not.
+	 */
+
+	list_for_each_entry(pwm, &pwm_list, head) {
+		if (pwm->pwm_id == pwm_id) {
+			found = true;
+			break;
+		}
+	}
+
+	if (found) {
+		if (pwm->use_count == 0) {
+			pwm->use_count++;
+			pwm->label = label;
+		} else {
+			pwm = ERR_PTR(-EBUSY);
+		}
+	} else {
+		pwm = ERR_PTR(-ENOENT);
+	}
+
+	mutex_unlock(&pwm_lock);
+
+	return pwm;
+}
+EXPORT_SYMBOL(pwm_request);
+
+/**
+ * pwm_free - deallocate/release a previously-requested generic PWM device.
+ * @pwm: A pointer to the generic PWM device to release.
+ */
+void pwm_free(struct pwm_device *pwm)
+{
+	mutex_lock(&pwm_lock);
+
+	if (pwm->use_count) {
+		pwm->use_count--;
+		pwm->label = NULL;
+	} else {
+		pr_err("PWM%d has already been freed.\n", pwm->pwm_id);
+	}
+
+	mutex_unlock(&pwm_lock);
+}
+EXPORT_SYMBOL(pwm_free);
+
+/**
+ * pwm_calc_value - determines the counter value for a clock rate and period.
+ * @clk_rate: The clock rate, in Hz, of the PWM's clock source to compute the
+ *            counter value for.
+ * @ns: The period, in nanoseconds, to computer the counter value for.
+ *
+ * Returns the PWM counter value for the specified clock rate and period.
+ */
+static inline int pwm_calc_value(unsigned long clk_rate, int ns)
+{
+	const unsigned long nanoseconds_per_second = 1000000000;
+	int cycles;
+	__u64 c;
+
+	c = (__u64)clk_rate * ns;
+	do_div(c, nanoseconds_per_second);
+	cycles = c;
+
+	return DM_TIMER_LOAD_MIN - cycles;
+}
+
+/**
+ * pwm_config - configures the generic PWM device to the specified parameters.
+ * @pwm: A pointer to the PWM device to configure.
+ * @duty_ns: The duty period of the PWM, in nanoseconds.
+ * @period_ns: The overall period of the PWM, in nanoseconds.
+ *
+ * Returns 0 if the generic PWM device was successfully configured;
+ * otherwise, < 0 on error.
+ */
+int pwm_config(struct pwm_device *pwm, int duty_ns, int period_ns)
+{
+	int status = 0;
+	const bool enable = true;
+	const bool autoreload = true;
+	const bool toggle = true;
+	const int trigger = OMAP_TIMER_TRIGGER_OVERFLOW_AND_COMPARE;
+	int load_value, match_value;
+	unsigned long clk_rate;
+
+	DEV_DBG(&pwm->pdev->dev,
+			"duty cycle: %d, period %d\n",
+			duty_ns, period_ns);
+
+	clk_rate = clk_get_rate(omap_dm_timer_get_fclk(pwm->dm_timer));
+
+	/* Calculate the appropriate load and match values based on the
+	 * specified period and duty cycle. The load value determines the
+	 * cycle time and the match value determines the duty cycle.
+	 */
+
+	load_value = pwm_calc_value(clk_rate, period_ns);
+	match_value = pwm_calc_value(clk_rate, period_ns - duty_ns);
+
+	/* We MUST enable yet stop the associated dual-mode timer before
+	 * attempting to write its registers.
+	 */
+
+	omap_dm_timer_enable(pwm->dm_timer);
+	omap_dm_timer_stop(pwm->dm_timer);
+
+	omap_dm_timer_set_load(pwm->dm_timer, autoreload, load_value);
+	omap_dm_timer_set_match(pwm->dm_timer, enable, match_value);
+
+	DEV_DBG(&pwm->pdev->dev,
+			"load value: %#08x (%d), "
+			"match value: %#08x (%d)\n",
+			load_value, load_value,
+			match_value, match_value);
+
+	omap_dm_timer_set_pwm(pwm->dm_timer,
+						  !pwm->config.polarity,
+						  toggle,
+						  trigger);
+
+	/* Set the counter to generate an overflow event immediately. */
+
+	omap_dm_timer_write_counter(pwm->dm_timer, DM_TIMER_LOAD_MIN);
+
+	/* Now that we're done configuring the dual-mode timer, disable it
+	 * again. We'll enable and start it later, when requested.
+	 */
+
+	omap_dm_timer_disable(pwm->dm_timer);
+
+	return status;
+}
+EXPORT_SYMBOL(pwm_config);
+
+/**
+ * pwm_enable - enable the generic PWM device.
+ * @pwm: A pointer to the generic PWM device to enable.
+ *
+ * Returns 0 if the generic PWM device was successfully enabled;
+ * otherwise, < 0 on error.
+ */
+int pwm_enable(struct pwm_device *pwm)
+{
+	int status = 0;
+
+	/* Enable the counter--always--before attempting to write its
+	 * registers and then set the timer to its minimum load value to
+	 * ensure we get an overflow event right away once we start it.
+	 */
+
+	omap_dm_timer_enable(pwm->dm_timer);
+	omap_dm_timer_write_counter(pwm->dm_timer, DM_TIMER_LOAD_MIN);
+	omap_dm_timer_start(pwm->dm_timer);
+
+	return status;
+}
+EXPORT_SYMBOL(pwm_enable);
+
+/**
+ * pwm_disable - disable the generic PWM device.
+ * @pwm: A pointer to the generic PWM device to disable.
+ */
+void pwm_disable(struct pwm_device *pwm)
+{
+	omap_dm_timer_enable(pwm->dm_timer);
+	omap_dm_timer_stop(pwm->dm_timer);
+	omap_dm_timer_disable(pwm->dm_timer);
+}
+EXPORT_SYMBOL(pwm_disable);
+
+/**
+ * omap_pwm_probe - check for the PWM and bind it to the driver.
+ * @pdev: A pointer to the platform device node associated with the
+ *        PWM instance to be probed for driver binding.
+ *
+ * Returns 0 if the PWM instance was successfully bound to the driver;
+ * otherwise, < 0 on error.
+ */
+static int __devinit omap_pwm_probe(struct platform_device *pdev)
+{
+	struct pwm_device *pwm = NULL;
+	struct omap2_pwm_platform_config *pdata = NULL;
+	int status = 0;
+
+	pdata = ((struct omap2_pwm_platform_config *)(pdev->dev.platform_data));
+
+	BUG_ON(pdata == NULL);
+
+	if (pdata == NULL) {
+		dev_err(&pdev->dev, "Could not find required platform data.\n");
+		status = -ENOENT;
+		goto done;
+	}
+
+	/* Allocate memory for the driver-private PWM data and state */
+
+	pwm = kzalloc(sizeof(struct pwm_device), GFP_KERNEL);
+
+	if (pwm == NULL) {
+		dev_err(&pdev->dev, "Could not allocate memory.\n");
+		status = -ENOMEM;
+		goto done;
+	}
+
+	/* Request the OMAP dual-mode timer that will be bound to and
+	 * associated with this generic PWM.
+	 */
+
+	pwm->dm_timer = omap_dm_timer_request_specific(pdata->timer_id);
+
+	if (pwm->dm_timer == NULL) {
+		status = -ENOENT;
+		goto err_free;
+	}
+
+	/* Configure the source for the dual-mode timer backing this
+	 * generic PWM device. The clock source will ultimately determine
+	 * how small or large the PWM frequency can be.
+	 *
+	 * At some point, it's probably worth revisiting moving this to
+	 * the configure method and choosing either the slow- or
+	 * system-clock source as appropriate for the desired PWM period.
+	 */
+
+	omap_dm_timer_set_source(pwm->dm_timer, OMAP_TIMER_SRC_SYS_CLK);
+
+	/* Cache away other miscellaneous driver-private data and state
+	 * information and add the driver-private data to the platform
+	 * device.
+	 */
+
+	pwm->pdev = pdev;
+	pwm->pwm_id = pdev->id;
+	pwm->config = *pdata;
+
+	platform_set_drvdata(pdev, pwm);
+
+	/* Finally, push the added generic PWM device to the end of the
+	 * list of available generic PWM devices.
+	 */
+
+	mutex_lock(&pwm_lock);
+	list_add_tail(&pwm->head, &pwm_list);
+	mutex_unlock(&pwm_lock);
+
+	status = 0;
+	goto done;
+
+ err_free:
+	kfree(pwm);
+
+ done:
+	return status;
+}
+
+/**
+ * omap_pwm_remove - unbind the specified PWM platform device from the driver.
+ * @pdev: A pointer to the platform device node associated with the
+ *        PWM instance to be unbound/removed.
+ *
+ * Returns 0 if the PWM was successfully removed as a platform device;
+ * otherwise, < 0 on error.
+ */
+static int __devexit omap_pwm_remove(struct platform_device *pdev)
+{
+	struct pwm_device *pwm = NULL;
+	int status = 0;
+
+	/* Attempt to get the driver-private data from the platform device
+	 * node.
+	 */
+
+	pwm = platform_get_drvdata(pdev);
+
+	if (pwm == NULL) {
+		status = -ENODEV;
+		goto done;
+	}
+
+	/* Remove the generic PWM device from the list of available
+	 * generic PWM devices.
+	 */
+
+	mutex_lock(&pwm_lock);
+	list_del(&pwm->head);
+	mutex_unlock(&pwm_lock);
+
+	/* Unbind the OMAP dual-mode timer associated with the generic PWM
+	 * device.
+	 */
+
+	omap_dm_timer_free(pwm->dm_timer);
+
+	/* Finally, release the memory associated with the driver-private
+	 * data and state.
+	 */
+
+	kfree(pwm);
+
+ done:
+	return status;
+}
+
+/**
+ * omap_pwm_init - driver/module insertion entry point
+ *
+ * This routine is the driver/module insertion entry point. It
+ * registers the driver as a platform driver.
+ *
+ * Returns 0 if the driver/module was successfully registered as a
+ * platform driver driver; otherwise, < 0 on error.
+ */
+static int __init omap_pwm_init(void)
+{
+	return platform_driver_register(&omap_pwm_driver);
+}
+
+/**
+ * omap_pwm_exit - driver/module removal entry point
+ *
+ * This routine is the driver/module removal entry point. It
+ * unregisters the driver as a platform driver.
+ */
+static void __exit omap_pwm_exit(void)
+{
+	platform_driver_unregister(&omap_pwm_driver);
+}
+
+arch_initcall(omap_pwm_init);
+module_exit(omap_pwm_exit);
+
+MODULE_AUTHOR("Grant Erickson <marathon96@xxxxxxxxx>");
+MODULE_LICENSE("GPLv2");
+MODULE_VERSION("2010-11-09");
Index: arch/arm/mach-omap2/board-owen-spk2xx-var.c
===================================================================
--- linux.old/arch/arm/mach-omap2/board-owen-spk2xx-var.c	(.../tags/owen-spk2xx-base)	(revision 926)
+++ linux.new/arch/arm/mach-omap2/board-owen-spk2xx-var.c	(.../branches/owen-spk2xx-denisv)	(revision 926)
@@ -33,6 +33,7 @@
 #include <linux/gpio_keys.h>
 #include <linux/input.h>
 #include <linux/leds.h>
+#include <linux/leds_pwm.h>
 
 #include <mach/hardware.h>
 #include <mach/am35xx.h>
@@ -48,6 +49,8 @@
 #include <plat/omap_hwmod.h>
 #include <plat/serial.h>
 #include <plat/omap-serial.h>
+#include <plat/pwm.h>
+#include <linux/pwm_backlight.h>
 
 #include <video/omapdss.h>
 #include <video/omap-panel-generic-dpi.h>
@@ -63,7 +66,9 @@
 /* GPIOs Definitions */
 
 /*LCD */
-#define LCD_BKLIGHT_EN		55
+#define LCD_BKLIGHT_EN			55
+#define LCD_BKLIGHT_GPT_PWM_ID		9
+#define LCD_BKLIGHT_GPT_PWM_MUX         "gpmc_ncs4.gpt9_pwm_evt"
 /* for SPK210 value is 0, for SPK207 value is 1 */
 #ifdef CONFIG_OWEN_SPK210_VAR
 #define LCD_BKLIGHT_EN_VAL		0
@@ -84,11 +89,66 @@
 #define SD_CARD_CD		142
 #define SD_CARD_CD_LEVEL	1
 
+#define SPK207_GPIO_DIRECT_ORDER	1
+
 /* Buttons, tumblers, leds */
-#define KN_BASE			34
+#if defined(CONFIG_OWEN_SPK207_VAR)
+#if defined(SPK207_GPIO_DIRECT_ORDER) && SPK207_GPIO_DIRECT_ORDER
+#define KN_B0			34
+#define KN_B1			35
+#define KN_B2			36
+#define KN_B3			37
+#define KN_B4			38
+#define KN_B5			39
+#define KN_B6			40
+#define KN_B7			41
+#define KN_B8			42
+#define KN_B9			43
 #define KN_COUNT		10
+#else
+#define KN_B0			35
+#define KN_B1			34
+#define KN_B2			37
+#define KN_B3			36
+#define KN_B4			39
+#define KN_B5			38
+#define KN_B6			40
+#define KN_B7			41
+#define KN_B8			42
+#define KN_B9			43
+#define KN_COUNT		6
+#endif
 #define TUMBLER1		185
+#elif defined(CONFIG_OWEN_SPK210_VAR)
+#define KN_B0			35
+#define KN_B1			34
+#define KN_B2			37
+#define KN_B3			36
+#define KN_B4			39
+#define KN_B5			38
+#define KN_B6			40
+#define KN_B7			41
+#define KN_B8			42
+#define KN_B9			43
+#define KN_COUNT		8
+#define TUMBLER1		185
+#else
+#define KN_B0			35
+#define KN_B1			34
+#define KN_B2			37
+#define KN_B3			36
+#define KN_B4			39
+#define KN_B5			38
+#define KN_B6			40
+#define KN_B7			41
+#define KN_B8			42
+#define KN_B9			43
+#define KN_COUNT		10
+#define TUMBLER1		185
+#endif
 
+#if defined(CONFIG_OWEN_SPK207_VAR)
+#if defined(SPK207_GPIO_DIRECT_ORDER) && SPK207_GPIO_DIRECT_ORDER
 #define LED_SV1			102
 #define LED_SV2			103
 #define LED_SV3			104
@@ -99,9 +159,53 @@
 #define LED_SV8			94
 #define LED_SV9			138
 #define LED_SV10		117
-
 #define LED_READY		65
 #define BUZZER			63
+#define LED_COUNT		(10+2)
+#else
+#define LED_SV1			103 /* SYS */
+#define LED_SV2			102 /* F1 */
+#define LED_SV3			105 /* F2 */
+#define LED_SV4			104 /* F3 */
+#define LED_SV5			136 /* F4 */
+#define LED_SV6			133 /* F5 */
+#define LED_SV7			137
+#define LED_SV8			94
+#define LED_SV9			138
+#define LED_SV10		117
+#define LED_READY		65
+#define BUZZER			63
+#define LED_COUNT		(6+2)
+#endif
+#elif defined(CONFIG_OWEN_SPK210_VAR)
+#define LED_SV1			103 /* SYS */
+#define LED_SV2			102 /* F1 */
+#define LED_SV3			105 /* F2 */
+#define LED_SV4			104 /* F3 */
+#define LED_SV5			136 /* F4 */
+#define LED_SV6			133 /* F5 */
+#define LED_SV7			137
+#define LED_SV8			94
+#define LED_SV9			138
+#define LED_SV10		117
+#define LED_READY		65
+#define BUZZER			63
+#define LED_COUNT		(8+2)
+#else
+#define LED_SV1			102
+#define LED_SV2			103
+#define LED_SV3			104
+#define LED_SV4			105
+#define LED_SV5			133
+#define LED_SV6			136
+#define LED_SV7			137
+#define LED_SV8			94
+#define LED_SV9			138
+#define LED_SV10		117
+#define LED_READY		65
+#define BUZZER			63
+#define LED_COUNT		(10+2)
+#endif
 
 /* UARTs */
 
@@ -308,34 +412,25 @@
 	return 0;
 }
 
-//TODO: innolux instead of URT_UMSH8272
 static void __init am3517_display_init(void)
 {
 #ifdef CONFIG_PANEL_VARISCITE
-
-	int r;
-	/* init and disable LCD backlight */
-	r = gpio_request(LCD_BKLIGHT_EN, "LCD_BKLIGHT_EN");
-	if (r) {
-		printk(KERN_ERR "failed to get LCD_BKLIGHT_EN gpio\n");
-		return;
-	}
-	omap_mux_init_gpio(LCD_BKLIGHT_EN, OMAP_PIN_OUTPUT);
-	gpio_direction_output(LCD_BKLIGHT_EN, !LCD_BKLIGHT_EN_VAL);
+	gpio_request(LCD_BKLIGHT_EN, "LCD_BKLIGHT_EN");
+	omap_mux_init_signal(LCD_BKLIGHT_GPT_PWM_MUX, OMAP_PIN_OUTPUT);
 #endif
 }
 
 static int am3517_panel_enable_lcd(struct omap_dss_device *dssdev)
 {
 	pr_info("%s: called\n", __func__);
-	gpio_set_value(LCD_BKLIGHT_EN, LCD_BKLIGHT_EN_VAL);
+//	gpio_set_value(LCD_BKLIGHT_EN, LCD_BKLIGHT_EN_VAL);
 	return 0;
 }
 
 static void am3517_panel_disable_lcd(struct omap_dss_device *dssdev)
 {
 	pr_info("%s: called\n", __func__);
-	gpio_set_value(LCD_BKLIGHT_EN, !LCD_BKLIGHT_EN_VAL);
+//	gpio_set_value(LCD_BKLIGHT_EN, !LCD_BKLIGHT_EN_VAL);
 }
 
 static struct omap_dss_device am3517_lcd_device = {
@@ -591,87 +686,90 @@
 	{}      /* Terminator */
 };
 
-#if 0
+
 /*
  * GPIO Buttons
  */
 #if defined(CONFIG_KEYBOARD_GPIO) || defined(CONFIG_KEYBOARD_GPIO_MODULE)
+
 static struct gpio_keys_button owen_spk2xx_buttons[] = {
-	{	/* BTN, "KN1" */
+	{	/* BTN, SYS */
 		.code		= BTN_0,
-		.gpio		= KN_BASE,
-		.active_low	= 1,
-		.desc		= "kn1",
+		.gpio		= KN_B0,
+		.active_low	= 0,//1,
+		.desc		= "sys",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN2" */
+	{	/* BTN, F1 */
 		.code		= BTN_1,
-		.gpio		= KN_BASE + 1,
-		.active_low	= 1,
-		.desc		= "kn2",
+		.gpio		= KN_B1,
+		.active_low	= 0,//1,
+		.desc		= "f1",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN3" */
+	{	/* BTN, F2 */
 		.code		= BTN_2,
-		.gpio		= KN_BASE + 2,
-		.active_low	= 1,
-		.desc		= "kn3",
+		.gpio		= KN_B2,
+		.active_low	= 0,//1,
+		.desc		= "f2",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN4" */
+	{	/* BTN, F3 */
 		.code		= BTN_3,
-		.gpio		= KN_BASE + 3,
-		.active_low	= 1,
-		.desc		= "kn4",
+		.gpio		= KN_B3,
+		.active_low	= 0,//1,
+		.desc		= "f3",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN5" */
+	{	/* BTN, F4 */
 		.code		= BTN_4,
-		.gpio		= KN_BASE + 4,
-		.active_low	= 1,
-		.desc		= "kn5",
+		.gpio		= KN_B4,
+		.active_low	= 0,//1,
+		.desc		= "f4",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN6" */
+	{	/* BTN, F5 */
 		.code		= BTN_5,
-		.gpio		= KN_BASE + 5,
-		.active_low	= 1,
-		.desc		= "kn6",
+		.gpio		= KN_B5,
+		.active_low	= 0,//1,
+		.desc		= "f5",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN7" */
+	{	/* BTN, F6 */
 		.code		= BTN_6,
-		.gpio		= KN_BASE + 6,
-		.active_low	= 1,
-		.desc		= "kn7",
+		.gpio		= KN_B6,
+		.active_low	= 0,//1,
+		.desc		= "f6",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN8" */
+	{	/* BTN, F7 */
 		.code		= BTN_7,
-		.gpio		= KN_BASE + 7,
-		.active_low	= 1,
-		.desc		= "kn8",
+		.gpio		= KN_B7,
+		.active_low	= 0,//1,
+		.desc		= "f7",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN9" */
+	{	/* BTN, F8 */
 		.code		= BTN_8,
-		.gpio		= KN_BASE + 8,
-		.active_low	= 1,
-		.desc		= "kn9",
+		.gpio		= KN_B8,
+		.active_low	= 0,//1,
+		.desc		= "f8",
 		.wakeup		= 1,
 	},
-	{	/* BTN, "KN10" */
+	{	/* BTN, F8 */
 		.code		= BTN_9,
-		.gpio		= KN_BASE + 9,
-		.active_low	= 1,
-		.desc		= "kn10",
+		.gpio		= KN_B9,
+		.active_low	= 0,//1,
+		.desc		= "f9",
 		.wakeup		= 1,
-	}
+	},
 };
 
+#define GPIO_KN_COUNT	(((KN_COUNT) > ARRAY_SIZE(owen_spk2xx_buttons)) ? ARRAY_SIZE(owen_spk2xx_buttons) : (KN_COUNT))
+
 static struct gpio_keys_platform_data owen_spk2xx_button_data = {
 	.buttons	= owen_spk2xx_buttons,
-	.nbuttons	= ARRAY_SIZE(owen_spk2xx_buttons),
+	.nbuttons	= GPIO_KN_COUNT
 };
 
 static struct platform_device owen_spk2xx_button_device = {
@@ -686,10 +784,9 @@
 static void __init owen_spk2xx_add_device_buttons(void)
 {
 	int i;
-	for (i = KN_BASE; i < KN_BASE + KN_COUNT; i++) {
-		omap_mux_init_gpio(i, OMAP_PIN_INPUT_PULLUP);
+	for (i = 0; i < GPIO_KN_COUNT; i++) {
+		omap_mux_init_gpio(owen_spk2xx_buttons[i].gpio, OMAP_PIN_INPUT_PULLUP);
 	}
-
 	platform_device_register(&owen_spk2xx_button_device);
 }
 #else
@@ -700,6 +797,18 @@
  * LEDs ... these could all be PWM-driven, for variable brightness
  */
 static struct gpio_led owen_spk2xx_leds[] = {
+	{	/* BUZZER */
+		.name			= "buzzer",
+		.gpio			= BUZZER,
+		.active_low		= 0,
+		.default_trigger	= "none",
+	},
+	{	/* READY */
+		.name			= "ready",
+		.gpio			= LED_READY,
+		.default_trigger	= "none",
+		.active_low		= 1,
+	},
 	{	/* SV1 */
 		.name			= "sv1",
 		.gpio			= LED_SV1,
@@ -760,21 +869,57 @@
 		.active_low		= 0,
 		.default_trigger	= "none",
 	},
+};
 
-	{	/* BUZZER */
-		.name			= "buzzer",
-		.gpio			= BUZZER,
-		.active_low		= 0,
-		.default_trigger	= "none",
+#define GPIO_LED_COUNT	(((LED_COUNT) > ARRAY_SIZE(owen_spk2xx_leds)) ? ARRAY_SIZE(owen_spk2xx_leds) : (LED_COUNT))
+
+static struct gpio_led_platform_data gpio_led_info = {
+	.leds		= owen_spk2xx_leds,
+	.num_leds	= GPIO_LED_COUNT,
+};
+
+
+static struct platform_device leds_gpio = {
+	.name	= "leds-gpio",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &gpio_led_info,
 	},
-	{	/* READY */
-		.name			= "ready",
-		.gpio			= LED_READY,
-		.default_trigger	= "none",
-	}
 };
-#endif
 
+
+/* pwm backlight */
+
+struct omap2_pwm_platform_config spk2xx_pwm_data = {
+	.timer_id	= LCD_BKLIGHT_GPT_PWM_ID,	// GPT9_PWM_EVT
+	.polarity	= LCD_BKLIGHT_EN_VAL
+};
+
+struct platform_device spk2xx_device_pwm = {
+	.name		= "omap-pwm",
+	.id		= LCD_BKLIGHT_GPT_PWM_ID,
+	.dev		= {
+		.platform_data = &spk2xx_pwm_data
+	},
+};
+
+static struct platform_pwm_backlight_data spk2xx_pwmbl_data = {
+  .pwm_id         = LCD_BKLIGHT_GPT_PWM_ID,
+  .max_brightness = 255,
+  .dft_brightness = 50,
+  /* tcnt = 0x31 */
+  .pwm_period_ns  = 7812500,
+};
+
+static struct platform_device spk2xx_device_pwmbl = {
+  .name = "pwm-backlight",
+  .dev  = {
+    .platform_data = &spk2xx_pwmbl_data,
+  },
+  .id   = -1,
+};
+
+
 static struct omap_board_config_kernel am3517_config[] __initdata = {
 };
 
@@ -913,6 +1058,11 @@
 	omap_board_config_size = ARRAY_SIZE(am3517_config);
 	omap3_mux_init(board_mux, OMAP_PACKAGE_ZCN);
 
+	/* leds */
+	platform_device_register(&leds_gpio);
+	platform_device_register(&spk2xx_device_pwm);
+	platform_device_register(&spk2xx_device_pwmbl);
+
 	am3517_i2c_init();
 	omap_display_init(&am3517_dss_data);
 	//omap_serial_init();
@@ -967,7 +1117,7 @@
 	omap2_hsmmc_init(mmc);
 
 	/* Push Buttons */
-	//owen_spk2xx_add_device_buttons();
+	owen_spk2xx_add_device_buttons();
 	/* Tumbler TUMB1 (SA2) */
 	omap_mux_init_gpio(TUMBLER1, OMAP_PIN_INPUT_PULLUP);
 
